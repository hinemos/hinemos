import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'java'
apply plugin: 'eclipse'

project.group = theGroup
version = theVersion

sourceCompatibility = theSourceCompatibility
targetCompatibility = theSourceCompatibility

ext.eclipseVer = theEclipseVer

repositories{
	mavenCentral()
}
configurations{
	jaxws
	genws
	hinemos_manager
}
dependencies{
	compile files("../common/build/libs/HinemosCommon.jar")
	compile files("../manager/build/libs/ClientWS.jar")

	compile group: 'commons-logging', name: 'commons-logging', version: '1.2'
	compile group: 'log4j', name: 'log4j', version: '1.2.17'
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
	compile group: 'commons-codec', name: 'commons-codec', version: '1.10'
	compile group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3.2'

	// RCP
	compile fileTree(dir: "lib/eclipse-${eclipseVer}/eclipse/plugins", include: 'org.eclipse.jface.databinding_*.jar')
	compile fileTree(dir: "lib/eclipse-${eclipseVer}/eclipse/plugins", include: 'org.eclipse.jface.text_3*.jar')
	compile fileTree(dir: "lib/eclipse-${eclipseVer}/eclipse/plugins", include: 'org.eclipse.jface_3*.jar')
	compile fileTree(dir: "lib/eclipse-${eclipseVer}/eclipse/plugins", include: 'org.eclipse.text_3*.jar')
	compile fileTree(dir: "lib/eclipse-${eclipseVer}/eclipse/plugins", include: 'org.eclipse.core.commands_3*.jar')
	compile fileTree(dir: "lib/eclipse-${eclipseVer}/eclipse/plugins", include: 'org.eclipse.core.runtime_3*.jar')
	compile fileTree(dir: "lib/eclipse-${eclipseVer}/eclipse/plugins", include: 'org.eclipse.equinox.app_1*.jar')
	compile fileTree(dir: "lib/eclipse-${eclipseVer}/eclipse/plugins", include: 'org.eclipse.equinox.common_3*.jar')
	compile fileTree(dir: "lib/eclipse-${eclipseVer}/eclipse/plugins", include: 'org.eclipse.equinox.preferences_3*.jar')
	compile fileTree(dir: "lib/eclipse-${eclipseVer}/eclipse/plugins", include: 'org.eclipse.equinox.registry_3*.jar')
	compile fileTree(dir: "lib/eclipse-${eclipseVer}/eclipse/plugins", include: 'org.eclipse.osgi_3*.jar')
	compile fileTree(dir: "lib/eclipse-${eclipseVer}/eclipse/plugins", include: 'org.eclipse.ui.workbench_3*.jar')
	compile fileTree(dir: "lib/eclipse-${eclipseVer}/eclipse/plugins", include: 'org.eclipse.swt_3*.jar')
	compile fileTree(dir: "lib/eclipse-${eclipseVer}/eclipse/plugins", include: 'org.eclipse.swt.*.x86_64_3*.jar')
	compile fileTree(dir: "lib/eclipse-${eclipseVer}/eclipse/plugins", include: 'org.eclipse.draw2d_3*.jar')
	compile fileTree(dir: "lib/eclipse-${eclipseVer}/eclipse/plugins", include: 'javax.servlet_3.1.*.jar')
}

eclipse{
	project{
		name = theJarName
	}
	classpath.file.withXml{
		def node = it.asNode()
		// Add some access rules
		def container = node.classpathentry.find{it.@kind == 'con'}
		if(container != null){
			def xmlparser = new XmlParser()
			def accessrules = xmlparser.createNode(container, 'accessrules', [:])
			accessrules.appendNode('accessrule', ['kind':'discouraged', 'pattern':'com/sun/net/httpserver/*'])
			accessrules.appendNode('accessrule', ['kind':'discouraged', 'pattern':'com/sun/xml/internal/ws/client/*'])
			accessrules.appendNode('accessrule', ['kind':'discouraged', 'pattern':'com/sun/xml/internal/ws/developer/*'])
		}
	}
}

tasks.withType(JavaCompile){
	options.encoding = 'UTF-8'

	// Overcome "package com.sun.xml.internal.xxx does not exist" when compiling
	options.fork = true
	options.forkOptions.executable = 'javac'
	options.compilerArgs << '-XDignore.symbol.file'
}
def manifestDef = {
	attributes(
		'Hinemos-Version': version,
		'Build-Date': new Date().format('yyyy-MM-dd HH:mm:ss', TimeZone.getTimeZone('UTC')))
}

jar{
	manifest(manifestDef)
}


// Doc
task sourcesJar(type: Jar, dependsOn: classes){
	classifier = 'sources'
	from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc){
	classifier = 'javadoc'
	from javadoc.destinationDir
}
artifacts{
	archives sourcesJar
	//archives javadocJar
}

// Source directories
sourceSets{
	main{
		java{
			srcDirs += [file('src/main/src'),
					file('src/main/src_accesscontrol'),
					file('src/main/src_approval'),
					file('src/main/src_calendar'),
					file('src/main/src_collect'),
					file('src/main/src_collectmaster'),
					file('src/main/src_custom'),
					file('src/main/src_customtrap'),
					file('src/main/src_hinemosagent'),
					file('src/main/src_http'),
					file('src/main/src_hub'),
					file('src/main/src_infra'),
					file('src/main/src_jmx'),
					file('src/main/src_jobmanagement'),
					file('src/main/src_logfile'),
					file('src/main/src_maintenance'),
					file('src/main/src_monitor'),
					file('src/main/src_notify'),
					file('src/main/src_performance'),
					file('src/main/src_ping'),
					file('src/main/src_port'),
					file('src/main/src_process'),
					file('src/main/src_repository'),
					file('src/main/src_snmp'),
					file('src/main/src_snmptrap'),
					file('src/main/src_sql'),
					file('src/main/src_startup'),
					file('src/main/src_systemlog'),
					file('src/main/src_winevent'),
					file('src/main/src_winservice'),
					file('src/main/java_client_rcp')]
		}
		resources{
			srcDirs += [file('src/main/src_collect'), file('src/main/src_infra')]
			include '*.html'
			include '*.css'
			include '*.js'
		}
	}
}

task export(type: Copy, dependsOn: build){
	description 'Rename the jar file to its original name then you can replace to Hinemos directly.'
	//from "${rootProject.buildDir}/${rootProject.libsDirName}"
	//into "${rootProject.buildDir}/${rootProject.libsDirName}"
	from "${buildDir}/${libsDirName}"
	into "${buildDir}/${libsDirName}"
	rename "${project.name}-$version", theJarName
}

